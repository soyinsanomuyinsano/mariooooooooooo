<!DOCTYPE html>
<html>
<head>
    <title>Simple Platformer Game</title>
    <style>
        canvas {
            border: 1px solid black;
            display: block;
            margin: 0 auto;
        }
        body {
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>Simple Platformer Game</h1>
    <canvas id="gameCanvas" width="800" height="400"></canvas>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        const player = {
            x: 50,
            y: 200,
            width: 50,
            height: 50,
            color: 'blue',
            speed: 5,
            dy: 0,
            gravity: 0.5,
            jumpStrength: -10
        };

        const levels = [
            { platforms: [{ x: 0, y: 350, width: 800, height: 50, color: 'green' }] },
            { platforms: [{ x: 0, y: 350, width: 400, height: 50, color: 'green' }, { x: 450, y: 300, width: 350, height: 50, color: 'green' }] },
            { platforms: [{ x: 0, y: 350, width: 200, height: 50, color: 'green' }, { x: 250, y: 300, width: 200, height: 50, color: 'green' }, { x: 500, y: 250, width: 300, height: 50, color: 'green' }] },
            { platforms: [{ x: 0, y: 350, width: 150, height: 50, color: 'green' }, { x: 200, y: 300, width: 150, height: 50, color: 'green' }, { x: 400, y: 250, width: 150, height: 50, color: 'green' }, { x: 600, y: 200, width: 200, height: 50, color: 'green' }] }
        ];

        let currentLevel = 0;

        let keys = {};

        function drawPlayer() {
            ctx.fillStyle = player.color;
            ctx.fillRect(player.x, player.y, player.width, player.height);
        }

        function drawLevel() {
            levels[currentLevel].platforms.forEach(platform => {
                ctx.fillStyle = platform.color;
                ctx.fillRect(platform.x, platform.y, platform.width, platform.height);
            });
        }

        function updatePlayer() {
            if (keys['ArrowLeft'] && player.x > 0) {
                player.x -= player.speed;
            }
            if (keys['ArrowRight'] && player.x + player.width < canvas.width) {
                player.x += player.speed;
            }
            if (keys['ArrowUp'] && isOnGround()) {
                player.dy = player.jumpStrength;
            }

            player.dy += player.gravity;
            player.y += player.dy;

            if (isOnGround()) {
                player.y = levels[currentLevel].platforms.find(platform => player.y + player.height <= platform.y && player.y + player.height + player.dy >= platform.y).y - player.height;
                player.dy = 0;
            }

            if (player.x + player.width > canvas.width) {
                nextLevel();
            }
        }

        function isOnGround() {
            return levels[currentLevel].platforms.some(platform => player.y + player.height <= platform.y && player.y + player.height + player.dy >= platform.y && player.x + player.width > platform.x && player.x < platform.x + platform.width);
        }

        function nextLevel() {
            if (currentLevel < levels.length - 1) {
                currentLevel++;
                player.x = 50;
                player.y = 200;
            } else {
                alert("Congratulations! You've completed all levels!");
                currentLevel = 0;
                player.x = 50;
                player.y = 200;
            }
        }

        function gameLoop() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            drawLevel();
            drawPlayer();
            updatePlayer();

            requestAnimationFrame(gameLoop);
        }

        window.addEventListener('keydown', (e) => {
            keys[e.key] = true;
        });

        window.addEventListener('keyup', (e) => {
            keys[e.key] = false;
        });

        gameLoop();
    </script>
</body>
</html>
